PROMPT FOR REPLIT: User Favorites & Order History Visibility Enhancement (No Admin Pop-up when clicking on USERS in admin dashboard)Goal: Enable Admin users to view registered user's Favorites and Order History (NOT in pop-up format), and enable Frontend users to view their own Order History, with minimal code adjustments and no regressions.Replit, please propose your approach and strategy for implementing this functionality. Focus on the smallest, most targeted adjustments to the site code to avoid any breakage of admin paths, frontend functionality, or the admin dashboard.PART 1: ADMIN PANEL - VIEW USER FAVORITES & ORDER HISTORY (CRITICAL: NO POP-UP)Replit: Propose the files to be modified in the backend to enable fetching a specific user's Favorites and Order History. This will likely involve:Identifying existing API endpoints (e.g., in server/routes.ts) for user details.Proposing new or modified functions in the data access layer (e.g., server/storage.ts) to query the database for:A user's favorited profile IDs.A user's order history (order details and associated profile IDs).Detailing how these functions will securely retrieve data based on a userId.Replit: Propose the files to be modified in the frontend for the Admin Panel.Crucial Requirement: The display of user Favorites and Order History MUST NOT be in a pop-up format.Recommended Low-Code Format: I recommend directing the existing "View Details" button (currently next to each user in the admin user list, as seen in your screenshot) to a new, dedicated Admin User Details page (e.g., a new route like /admin/users/:userId/details). This new page would display all comprehensive user information, including the new Favorites and Order History tabs/sections. This approach isolates new complex UI from existing layouts, minimizing breakage risk.Replit: Detail how you will modify the existing "View Details" button/link in the current admin user list (client/src/pages/admin/AdminUsers.tsx or similar) to navigate to this new page.Replit: Describe the basic structure of this new Admin User Details page and how it will call the new/modified backend APIs (from Part 1.1) to display the Favorites and Order History.PART 2: FRONTEND USER - VIEW OWN ORDER HISTORYReplit: Propose the files to be modified in the backend (similar to Part 1) to enable a logged-in frontend user to fetch their own Order History. This API should automatically use the authenticated user's ID for security.Replit: Propose the files to be modified in the frontend (e.g., user's dashboard, profile settings, or a new "My Orders" page accessible via navigation) to:Call this new backend API.Display the logged-in user's order history and details.General Strategy & Safeguards:Replit: Explain how you will ensure proper authentication and authorization for all new/modified API endpoints (e.g., only admins can access Part 1 APIs, only the logged-in user can access Part 2 API for their own data).Replit: Detail how you will minimize changes to existing code, focusing on adding new logic, new pages/components, or modifying existing data structures/API responses rather than large refactors.Replit: Specify your testing strategy to confirm the new functionality works without breaking existing admin paths or frontend features.Replit: Present your complete approach and strategy, identifying specific file paths and detailing the proposed changes, for my review and approval before any code is modified.